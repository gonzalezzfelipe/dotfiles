# Remap prefix to Ctrl-a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Smart pane switching with awareness of vim splits (use vim-tmux-navigator
# plugin in vim!)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|ssh|mosh|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

# Enable mouse, allow scrolling selected text and don't exit copy-mode when
# releasing selection
set -g mouse on
bind-key -T root WheelUpPane select-pane -t =\; copy-mode -e\; send-keys -M
unbind -T copy-mode-vi MouseDragEnd1Pane

# Split pane using v and s (in the same directory from where they are called)
# For horizontal splits we automatically set the size to rougly 10 lines
unbind '"'
unbind %
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"\; resize-pane -y 10

# Increase or decrease pane height with h,j,k and l (the -r flag makes it
# repeatable i.e no need to press prefix key again and again)
bind -r j resize-pane -D 3
bind -r k resize-pane -U 3
bind -r h resize-pane -L 3
bind -r l resize-pane -R 3
bind = select-layout -E

# Create new buffer/tab (actually a window) with kill it (also if pane) with c
bind b new-window -c "#{pane_current_path}"
bind c kill-pane

# Rename window
bind-key r command-prompt 'rename-window %%'

# Move windows
bind-key C-h swap-window -d
bind-key C-l swap-window -d

# Choose window (window tree navigation)
bind-key w choose-window

# Pane movement (merge and break)
bind-key m choose-window "join-pane -v -s "%%""  # horizontal merge
bind-key C-b break-pane

# From here on we set vim copy bindings (note: we set the insert and command
# mode mappings directly in our bash profile!)
# Go the beginning and end of line in copy mode
bind -Tcopy-mode-vi H send -X start-of-line
bind -Tcopy-mode-vi L send -X end-of-line

# Do visual and block selection as in vim (for block selection we need to press
# C-v + space and then start our selection)
unbind-key -Tcopy-mode-vi v
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi 'C-v' send -X rectangle-toggle

# Unbind Enter since we rebind it for copying
unbind-key -Tcopy-mode-vi Enter

# Unbind p since we rebind it to paste
unbind p
unbind n
# Use prefix + C-p to go to the previous window (and C-n to the next one)
bind -r C-p previous-window
bind -r C-n next-window

# Copy to system clipboard as in vim (both with y and the default `Enter`
# mappings). On linux and X11 operate on the clipboard selection and not the
# primary one (i.e in vim we use the + register and not the * one)
bind -Tcopy-mode-vi y send -X copy-pipe "pbcopy"
bind -Tcopy-mode-vi Enter send -X copy-pipe "pbcopy"

# Paste from system clipboard without bracketed paste
bind P run-shell "pbpaste | tmux load-buffer - && tmux paste-buffer"

# Paste from system clipboard using bracketed paste
bind p run-shell " \
    tmux set-buffer \"$(pbpaste)\"; \
    tmux send-keys escape \"[200~\"; \
    tmux paste-buffer; \
    tmux send-keys escape \"[201~\" \
"
